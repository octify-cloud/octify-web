model User {
    id               String        @id
    name             String
    email            String
    emailVerified    Boolean
    image            String?
    createdAt        DateTime
    updatedAt        DateTime
    twoFactorEnabled Boolean?
    role             String?
    banned           Boolean?
    banReason        String?
    banExpires       DateTime?
    lastOrgOpened    Organization? @relation(fields: [lastOrgOpenedId], references: [id])
    accounts         Account[]
    members          Member[]
    invitations      Invitation[]
    twofactors       TwoFactor[]
    lastOrgOpenedId  String?

    @@unique([email])
    @@map("user")
}

model Account {
    id                    String    @id
    accountId             String
    providerId            String
    userId                String
    user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    accessToken           String?
    refreshToken          String?
    idToken               String?
    accessTokenExpiresAt  DateTime?
    refreshTokenExpiresAt DateTime?
    scope                 String?
    password              String?
    createdAt             DateTime
    updatedAt             DateTime

    @@map("account")
}

model Verification {
    id         String    @id
    identifier String
    value      String
    expiresAt  DateTime
    createdAt  DateTime?
    updatedAt  DateTime?

    @@map("verification")
}

model Organization {
    id            String       @id
    name          String
    slug          String?
    logo          String?
    createdAt     DateTime
    metadata      String?
    members       Member[]
    invitations   Invitation[]
    lastOpenUsers User[]

    @@unique([slug])
    @@map("organization")
}

model Member {
    id             String       @id
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    userId         String
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    role           String
    createdAt      DateTime

    @@map("member")
}

model Invitation {
    id             String       @id
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    email          String
    role           String?
    status         String
    expiresAt      DateTime
    inviterId      String
    user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

    @@map("invitation")
}

model TwoFactor {
    id          String @id
    secret      String
    backupCodes String
    userId      String
    user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("twoFactor")
}
